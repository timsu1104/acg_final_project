#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "random.glsl"
#include "vertex.glsl"
#include "hit_record.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}

HitRecord TraceRay(vec3 origin, vec3 direction) {
  HitRecord hit_record;
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
  return hit_record;
}

// float color_refraction[] = {1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7};
// vec3 color_albedo[] = {{1, 0, 0}, {1, 0.5, 0}, {1, 1, 0}, {0, 1, 0}, {0, 1, 1}, {0, 0, 1}, {0.5, 0, 0.5}};

float color_refraction[] = {1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7};
vec3 color_albedo[] = {{1, 0, 0}, {1, 0.5, 0}, {1, 1, 0}, {0, 1, 0}, {0, 1, 1}, {0, 0, 1}, {0.5, 0, 0.5}};

// clang-format off
#include "pdf.glsl"
// clang-format on

float reflectance(float cosine, float ref_idx) {
  float r0 = (1.0 - ref_idx) / (1.0 + ref_idx);
  r0 = r0 * r0;
  return r0 + (1 - r0) * pow((1.0f - cosine), 5);
}

vec3 eval_microfacet(vec3 direction, vec3 out_direction, vec3 normal, vec3 albedo) {
  float cosa = dot(normal, out_direction);
  if (cosa > 0.0) {
    float roughness = 1.0;
    vec3 v = normalize(-direction);
    vec3 l = normalize(out_direction);
    vec3 h = normalize(v + l);
    vec3 n = normalize(normal);
    float D = DistributionGGX(n, h, roughness);
    float G = geometrySmith(n, v, l, roughness);
    float F;
    float etat = 1.85;
    fresnel(direction, n, etat, F);
    vec3 div1 = vec3(D * G * F);
    float div2 = 4 * max(dot(n, v), 0.0) * max(dot(n, l), 0.0);
    vec3 fr = div1 / max(div2, 1e-3);
    float ks_ = F;
    float kd_ = 1.0 - ks_;
    vec3 diffuse =  vec3(1.0 / PI);
    return albedo * fr + kd_ * albedo * diffuse;
  } else {
    return vec3(0.0);
  } 
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  vec3 l_dir = vec3(0.0);
  const float rate = 0.9;
  const float eps = 1e-3;
  const float min_light_dot = 0.0;
  const float ray_marching_step = 10; 
  const float ray_marching_maxlen = 400; 
  const vec3 global_attenuation = vec3(0, 1.0, 1.0) * 3e-3;
  const float g = 0.5; // Henyey Greenstein coef. 

  int light_num=0;
  LightPdf light_sampler[7];
  int main_light_idx = 0;
  for (int light_idx = 0; light_idx < materials.length(); light_idx++)
    if (materials[light_idx].material_type == MATERIAL_TYPE_EMISSION && materials[light_idx].emission_strength > 0) {
      light_sampler[light_num].index = light_idx;
      light_sampler[light_num].area = GetArea(light_idx);
      light_sampler[light_num].center = GetCenter(light_idx);
      if (materials[light_idx].belong_id == 100) {
        main_light_idx = light_num;
      }
      light_num++;
      if (light_num == 7) break;
    }

  int volume_num=0;
  VolumeLightPdf volume_sampler[2];
  for (int volume_idx = 0; volume_idx < materials.length(); volume_idx++)
    if (materials[volume_idx].material_type == MATERIAL_TYPE_VOLUME) {
      volume_sampler[volume_num].index = volume_idx;
      volume_sampler[volume_num].volume = GetVolume(volume_idx);
      volume_num++;
      if (volume_num == 2) break;
    }
  
  MixturePdf mixpdf;
  mixpdf.light_ = light_sampler;
  mixpdf.volume_ = volume_sampler;
  mixpdf.prob_light = 0.2;
  mixpdf.prob_volume = 0.1;
  mixpdf.prob_cosine = 1.0 - mixpdf.prob_light - mixpdf.prob_volume;
  mixpdf.light_num = light_num;
  mixpdf.volume_num = volume_num;
  
  bool is_in_volume = false;
  Material volume_material;

  for (int b = 0; b < guo.num_bounces; b++) {
    HitRecord hit_record = TraceRay(origin, direction);

    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    } else {
      Material material = materials[hit_record.hit_entity_id];

      // Raymarching
      if (b == 0) {
        vec3 l_scatter = vec3(0.0);
        int num_ray_samples = 0;
        float max_length = min(length(hit_record.position - origin), ray_marching_maxlen);
        for (num_ray_samples = 1; num_ray_samples * ray_marching_step < max_length; num_ray_samples ++) {
          vec3 point = origin + num_ray_samples * ray_marching_step * direction;
          int index = light_sampler[main_light_idx].index;
          vec3 light_dir = normalize(light_sampler[main_light_idx].center - point);
          HitRecord light_hit_record = TraceRay(point, light_dir);
          if (light_hit_record.hit_entity_id == index && abs(light_dir.y) > min_light_dot) {
            vec3 light_color = materials[index].emission * materials[index].emission_strength;
            l_scatter += throughput * global_attenuation * HenyeyGreensteinPhase(direction, light_dir, g) * light_color;
          }
        }
        // l_scatter /= num_ray_samples;
        l_dir += l_scatter;
      }

      if (is_in_volume || material.material_type == MATERIAL_TYPE_VOLUME) {
        if (!is_in_volume) {
          volume_material = material;
        }
        uint channel = RandomInt(3);
        float sigma_t = volume_material.attenuation[channel];
        float dist = -log(RandomFloat()) / sigma_t;
        HitRecord far_hit_record = TraceRayMesh(
          hit_record.hit_entity_id, 
          origin, 
          direction, 
          eps, 
          true
        );
        vec3 t_min_point = is_in_volume ? origin : hit_record.position;
        HitRecord inside_hit_record = is_in_volume ? hit_record : TraceRay(
          t_min_point, 
          direction
        );
        float volume_t_max = distance(t_min_point, far_hit_record.position); 
        float inside_t_max = distance(t_min_point, inside_hit_record.position);
        float free_dist = is_in_volume ? 0 : distance(origin, hit_record.position);
        float t = dist * direction.length();
        if (inside_hit_record.hit_entity_id == far_hit_record.hit_entity_id || t < inside_t_max) {
          if (t < volume_t_max) {
            radiance += throughput * volume_material.emission * volume_material.emission_strength;

            if (volume_material.belong_id >= 0) {
              LightPdf light_sampler;
              light_sampler.index = volume_material.belong_id;
              light_sampler.area = GetArea(volume_material.belong_id);
              vec3 light_dir = sample_mesh(volume_material.belong_id, GetArea(volume_material.belong_id)) - hit_record.position;
              float light_pdf = Value_Light(light_sampler, origin, light_dir);
              vec3 light_color = materials[volume_material.belong_id].emission * materials[volume_material.belong_id].emission_strength;
              float g = 0.0;
              float scatter = 1.0/(4.0*PI) * (1.0 - g * g)/ pow(1.0 + g * g - 2.0*g* dot(light_dir,direction), 1.5);
              l_dir += throughput * scatter * light_color / light_pdf;
            }

            vec3 density = volume_material.attenuation * exp(-sigma_t * t * direction);
            float pdf = (density.x + density.y + density.z) / 3;
            throughput *= volume_material.albedo_color * exp(-sigma_t * t * direction) / pdf;
            origin += free_dist + dist * direction;
            direction = HenyeyGreenstein(direction, 0);
            if (!is_in_volume) {
              is_in_volume = true;
            }
          } else {
            vec3 density = exp(-sigma_t * t * direction);
            float pdf = (density.x + density.y + density.z) / 3;
            origin = far_hit_record.position + eps * direction;
            throughput *= exp(-sigma_t * t * direction) / pdf;
            if (is_in_volume)
              is_in_volume = false;
          }
          continue;
        }
      }

      if (material.material_type == MATERIAL_TYPE_EMISSION) {
        if (b == 0 || abs(dot(hit_record.normal, direction)) > min_light_dot) {
          radiance += throughput * material.emission * material.emission_strength;
        }
        break;
      }
      
      vec3 pre_orig = origin;
      origin = hit_record.position;
      vec3 albedo = material.albedo_color;
      vec3 normal = hit_record.normal;
      if (dot(normal, direction) > 0.0) {
        normal = -normal;
      }
      if (material.normal_map_id >= 0) {
        normal = vec3(texture(texture_samplers[material.normal_map_id],
                                   hit_record.tex_coord));
      }
      
      if (material.material_type == MATERIAL_TYPE_LAMBERTIAN) {
        if (material.albedo_texture_id >= 0) {
          albedo *= vec3(texture(texture_samplers[material.albedo_texture_id],
                                   hit_record.tex_coord));
        }

        for (int i = 0; i < light_num; i++) {
          light_sampler[i].normal_ = normal;
        }
        
        uint sel_light_idx = RandomInt(light_num);
        vec3 light_dir = Generate_Light(light_sampler[sel_light_idx], origin);
        if (light_dir != vec3(0.0)) {
          int index = light_sampler[sel_light_idx].index;
          float light_pdf = Value_Light(light_sampler[sel_light_idx], origin, light_dir);
          if (light_pdf > 0 && abs(dot(light_sampler[sel_light_idx].normal_, light_dir)) > min_light_dot) {
            vec3 light_color = materials[index].emission * materials[index].emission_strength;
            float scatter = max(0.0, dot(normal, direction) / PI);
            l_dir += throughput * albedo * scatter * light_color / light_pdf;
          }
        }

        for (int i = 0; i < volume_num; i++) {
          volume_sampler[i].normal_ = normal;
        }

        uint sel_vol_idx = RandomInt(volume_num);
        vec3 volume_dir = Generate_Volume(volume_sampler[sel_vol_idx], origin);
        if (volume_dir != vec3(0.0)) {
          int index = volume_sampler[sel_vol_idx].index;
          float volume_pdf = Value_Volume(volume_sampler[sel_vol_idx], origin, volume_dir);
          if (volume_pdf > 0) {
            vec3 volume_color = materials[index].emission * materials[index].emission_strength;
            float scatter = max(0.0, dot(normal, direction) / PI);
            l_dir += throughput * albedo * scatter * volume_color / volume_pdf;
          }
        }

        CosineHemispherePdf brdf_sample;
        brdf_sample.uvw = Onb_from_z(normal);
        
        // Importance Sampling from Lambertian BRDF
        // direction = Generate_Cos(brdf_sample, origin);
        // float pdf = Value_Cos(brdf_sample, direction);
        
        // Importance Sampling from Light
        // direction = Generate_Light(light_sampler[sel_light_idx], origin);
        // if (direction == vec3(0.0))
        //   break;
        // float pdf = Value_Light(light_sampler[sel_light_idx], origin, direction);

        // Importance Sampling from Volume
        // direction = Generate_Volume(volume_sampler[sel_vol_idx], origin);
        // if (direction == vec3(0.0)) {
        //   break;
        // }
        // float pdf = Value_Volume(volume_sampler[sel_vol_idx], origin, direction);

        // Multiple Importance Sampling
        mixpdf.cosine_ = brdf_sample;
        for (int i = 0; i < light_num; i++) {
          mixpdf.light_[i].normal_ = normal;
        }
        for (int i = 0; i < volume_num; i++) {
          mixpdf.volume_[i].normal_ = normal;
        }

        direction = Generate_Mix(mixpdf, origin);
        if (direction == vec3(0.0))
          break;
        float pdf = Value_Mix(mixpdf, origin, direction);

        float scatter = max(0.0, dot(normal, direction) / PI);
        throughput *= albedo * scatter / pdf / rate;
      }

      if (material.material_type == MATERIAL_TYPE_SPECULAR) {
        direction = reflect(direction, hit_record.normal);
        throughput *= albedo;
      }

      if (material.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
        uint color_index = RandomInt(7);
        float ir = color_refraction[color_index];
        float refraction_ratio = hit_record.front_face ?  (1.0 / ir) : ir;
        throughput *= albedo * color_albedo[color_index];
        if (dot(normal, direction) > 0.0) {
          normal = -normal;
        }
        float cosine = abs(dot(normal, direction) / (length(normal) * length(direction)));
        float sine = sqrt(1.0 - cosine * cosine);
        bool cannot_refract = refraction_ratio * sine > 1.0;
        if (cannot_refract || reflectance(cosine, refraction_ratio) > RandomFloat()) {
          direction = reflect(direction, normal);
        } else {
          direction = refract(direction, normal, refraction_ratio);
      }
      }
      
      if (material.material_type == MATERIAL_TYPE_MICROFACET) {
        if (material.albedo_texture_id >= 0) {
          albedo *= vec3(texture(texture_samplers[material.albedo_texture_id],
                                   hit_record.tex_coord));
        }
        CosineHemispherePdf brdf_sample;
        brdf_sample.uvw = Onb_from_z(normal);

        vec3 out_direction = RandomInSphere();
        // vec3 out_direction = Generate_Cos(brdf_sample, origin);
        float pdf;
        if (dot(out_direction, normal) > 0.0) {
          pdf = 0.5 / PI;
        } else {
          pdf = 0.001;
        }
        vec3 scatter = dot(direction, -normal) * eval_microfacet(direction, out_direction, normal, albedo);
        // pdf *= Value_Cos(brdf_sample, direction);
        direction = out_direction;
        throughput *= scatter / pdf / rate;
      }

      

      if (RandomFloat() > rate || max(throughput.x, max(throughput.y, throughput. z)) < 1e-5) {
        break;
      }
      //  else {
      //   throughput *= material.albedo_color *
      //                 vec3(texture(texture_samplers[material.albedo_texture_id],
      //                              hit_record.tex_coord));
      //   origin = hit_record.position;
      //   direction = guo.envmap_light_direction;
      //   radiance += throughput * guo.envmap_minor_color;
      //   throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
      //   TraceRay(origin, direction);
      //   if (ray_payload.t < 0.0f) {
      //     radiance += throughput * guo.envmap_major_color;
      //   }
      //   break;
      // }
    }
  }
  radiance = l_dir + radiance;
  return radiance;
}

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}